name: Run unit tests

on:
  pull_request:
    branches:
      - main
      - develop
      - release/*
      - feature/*
      - hotfix/*
    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review
  push:
    branches:
      - main
      - develop
      - release/*
      - hotfix/*
      - feature/*
  workflow_dispatch:

jobs:
  run-unit-tests:
    name: Run unit tests
    # Matrix: test multiple OS, LabVIEW versions, and bitness
    runs-on: ubuntu-latest
    needs: labview-test-matrix
    steps:
      - name: Mark test suite as passed
        run: echo "All LabVIEW matrix tests completed successfully."

  labview-test-matrix:
    strategy:
      matrix:
        os: [windows]
        lv-version: ["2021"]
        bitness: ["32","64"]
      fail-fast: false

    # Map your matrix OS to specific self-hosted runner labels
    runs-on: ${{ matrix.os == 'windows' && 'self-hosted-windows-lv' || 'self-hosted-linux-lv' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run unit tests
        shell: pwsh
        working-directory: pipeline/scripts
        run: |
          .\RunUnitTests.ps1 -MinimumSupportedLVVersion ${{ matrix.lv-version }} -SupportedBitness ${{ matrix.bitness }}

      - name: Summarize test results
        if: always()  # run this even if the previous step fails
        shell: pwsh
        working-directory: pipeline/scripts
        run: |
          $reportPath = ".\UnitTestReport.xml"
          if (!(Test-Path $reportPath)) {
              Write-Host "No UnitTestReport.xml found; nothing to summarize."
              exit 0
          }

          try {
              [xml]$xmlDoc = Get-Content $reportPath -ErrorAction Stop
          }
          catch {
              Write-Host "UnitTestReport.xml is invalid or malformed: $($_.Exception.Message)"
              exit 0
          }

          $testCases = $xmlDoc.SelectNodes("//testcase")
          if (!$testCases -or $testCases.Count -eq 0) {
              Write-Host "No <testcase> entries found in the report."
              exit 0
          }

          # Build a Markdown table
          $markdown = "## LabVIEW Unit Test Results`n"
          $markdown += "| TestCaseName | ClassName | Status | Time(s) | Assertions |`n"
          $markdown += "|---|---|---|---|---|`n"

          foreach ($case in $testCases) {
              $name       = $case.GetAttribute("name")
              $className  = $case.GetAttribute("classname")
              $status     = $case.GetAttribute("status")
              $time       = $case.GetAttribute("time")
              $assertions = $case.GetAttribute("assertions")

              $markdown += "| $name | $className | $status | $time | $assertions |`n"
          }

          # Write the table into the GitHub Step Summary, so it appears in the workflow's "Summary" tab
          Add-Content -Path $Env:GITHUB_STEP_SUMMARY -Value $markdown
